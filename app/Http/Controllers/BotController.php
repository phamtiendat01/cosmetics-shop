<?php
// app/Http/Controllers/BotController.php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Str;
use App\Services\GeminiClient;
use App\Services\GeminiTools;
use App\Services\BotTools;
use App\Services\ConversationMemory;
use App\Services\BotLogger;

class BotController extends Controller
{
    public function chat(Request $r)
    {
        $t0  = BotLogger::start();
        $msg = trim((string) $r->input('message', ''));
        $chips = ['T∆∞ v·∫•n ch·ªçn m·ªπ ph·∫©m', 'Ph√≠ ship', 'Ch√≠nh s√°ch ƒë·ªïi tr·∫£', 'Tra c·ª©u ƒë∆°n', '/reset'];

        // Reset h·ªôi tho·∫°i
        if (Str::startsWith($msg, '/reset')) {
            ConversationMemory::reset();
            $reply = 'ƒê√£ l√†m m·ªõi h·ªôi tho·∫°i ‚ú® B·∫°n c·∫ßn m√¨nh t∆∞ v·∫•n g√¨ n√®? (vd: da d·∫ßu m·ª•n, ng√¢n s√°ch 300-500k)';
            BotLogger::save($msg, $reply, ['t0' => $t0, 'handled_by' => 'reset', 'intent' => 'none']);
            return response()->json(['reply' => $reply, 'suggestions' => $chips, 'products' => []]);
        }

        // MEMORY
        $mem = ConversationMemory::load();
        ConversationMemory::extractUserSignals($msg, $mem);
        $userForModel = ConversationMemory::applyCorefHint($msg, $mem);
        $lower = Str::lower($msg);

        /* ===== GUARD: greeting & toxic (kh√¥ng g·ªçi search/resolve) ===== */
        foreach (['ch√†o', 'xin ch√†o', 'hello', 'hi', 'hey', 'alo'] as $g) {
            if (Str::startsWith($lower, $g)) {
                $reply = "Ch√†o b·∫°n üëã M√¨nh l√† CosmeBot. B·∫°n c·∫ßn t∆∞ v·∫•n lo·∫°i da, ng√¢n s√°ch hay t√™n s·∫£n ph·∫©m n√†o n√®?";
                BotLogger::save($msg, $reply, ['t0' => $t0, 'handled_by' => 'greet', 'intent' => 'none']);
                return response()->json(['reply' => $reply, 'products' => [], 'suggestions' => ['T∆∞ v·∫•n ch·ªçn m·ªπ ph·∫©m', 'Tra c·ª©u ƒë∆°n', '/reset']]);
            }
        }
        if (Str::contains($lower, ['ngu', '√≥c', 'dm', 'ƒëm', 'vl', 'cc', 'c√∫t', 'vkl', 'lol'])) {
            $reply = "M√¨nh ·ªü ƒë√¢y ƒë·ªÉ gi√∫p b·∫°n mua s·∫Øm cho vui v·∫ª n√® üòä B·∫°n cho m√¨nh bi·∫øt b·∫°n ƒëang c·∫ßn t∆∞ v·∫•n g√¨: lo·∫°i da, ng√¢n s√°ch hay t√™n s·∫£n ph·∫©m nh√©?";
            BotLogger::save($msg, $reply, ['t0' => $t0, 'handled_by' => 'guard', 'intent' => 'none']);
            return response()->json(['reply' => $reply, 'products' => [], 'suggestions' => ['T∆∞ v·∫•n ch·ªçn m·ªπ ph·∫©m', '/reset']]);
        }
        /* ===== FAST PATH: ƒë·∫Øt nh·∫•t / r·∫ª nh·∫•t (c√≥ th·ªÉ k√®m brand/category) ===== */
        if (
            Str::contains($lower, ['ƒë·∫Øt nh·∫•t', 'cao nh·∫•t', 'gi√° cao nh·∫•t', 'm·∫Øc nh·∫•t', 'max price'])
            || Str::contains($lower, ['r·∫ª nh·∫•t', 'th·∫•p nh·∫•t', 'gi√° th·∫•p nh·∫•t', 'min price', 'b√¨nh d√¢n nh·∫•t'])
        ) {

            $isCheapest = Str::contains($lower, ['r·∫ª nh·∫•t', 'th·∫•p nh·∫•t', 'gi√° th·∫•p nh·∫•t', 'min price', 'b√¨nh d√¢n nh·∫•t']);
            [$cat, $brand] = \App\Services\BotTools::guessFilters($msg);

            $cards = \App\Services\BotTools::topByPrice($isCheapest ? 'asc' : 'desc', $cat, $brand, 6);

            $where = $brand ? " c·ªßa **$brand**" : '';
            if ($cat) $where .= ($where ? ' trong' : ' trong') . " danh m·ª•c **$cat**";

            $title = $isCheapest ? "C√°c s·∫£n ph·∫©m r·∫ª nh·∫•t$where n√®:" : "C√°c s·∫£n ph·∫©m ƒë·∫Øt nh·∫•t$where n√®:";
            $reply = $cards ? $title : "M√¨nh ch∆∞a t√¨m ra danh s√°ch ph√π h·ª£p. B·∫°n th·ª≠ ch·ªâ r√µ brand/danh m·ª•c gi√∫p m√¨nh nh√©!";

            \App\Services\BotLogger::save($msg, $reply, [
                't0' => $t0,
                'handled_by' => 'top_price',
                'intent' => $isCheapest ? 'cheapest' : 'most_expensive',
                'product_count' => count($cards)
            ]);

            \App\Services\ConversationMemory::pushTurn($mem, 'user', $msg);
            \App\Services\ConversationMemory::pushTurn($mem, 'assistant', $reply);
            \App\Services\ConversationMemory::save($mem);

            return response()->json([
                'reply' => $reply,
                'products' => $cards,
                'suggestions' => $isCheapest
                    ? ['Cho m√¨nh lo·∫°i cao c·∫•p h∆°n', 'L·ªçc theo brand', '/reset']
                    : ['Cho m√¨nh lo·∫°i r·∫ª h∆°n', 'L·ªçc theo brand', '/reset']
            ]);
        }


        /* ===== FAST PATH A: ‚Äúcho v√†i s·∫£n ph·∫©m ‚Ä¶‚Äù ===== */
        if (Str::contains($lower, [
            'm·∫•y s·∫£n ph·∫©m',
            'v√†i s·∫£n ph·∫©m',
            's·∫£n ph·∫©m n√†o c≈©ng ƒë∆∞·ª£c',
            'g·ª£i √Ω s·∫£n ph·∫©m',
            'random',
            'xem th·ª≠ s·∫£n ph·∫©m',
            's·∫£n ph·∫©m c·ªßa shop',
            'gi·ªõi thi·ªáu s·∫£n ph·∫©m',
            'nhanh l√™n'
        ])) {
            $cards = BotTools::pickProducts(8);
            $text = $cards
                ? 'M√¨nh ch·ªçn nhanh v√†i m√≥n ƒëang hot/c√≤n h√†ng ƒë·ªÉ b·∫°n tham kh·∫£o n√® ‚ú®'
                : 'Hi·ªán m√¨nh ch∆∞a l·∫•y ƒë∆∞·ª£c danh s√°ch. B·∫°n n√≥i ng√¢n s√°ch/lo·∫°i da ƒë·ªÉ m√¨nh l·ªçc k·ªπ h∆°n nh√©!';
            BotLogger::save($msg, $text, ['t0' => $t0, 'handled_by' => 'pick', 'intent' => 'generic', 'product_count' => count($cards)]);
            ConversationMemory::pushTurn($mem, 'user', $msg);
            ConversationMemory::pushTurn($mem, 'assistant', $text);
            ConversationMemory::save($mem);
            return response()->json(['reply' => $text, 'products' => $cards, 'suggestions' => $chips]);
        }

        /* ===== FAST PATH B: ‚Äúc√≤n h√†ng kh√¥ng‚Äù ===== */
        if (Str::contains($lower, ['c√≤n kh√¥ng', 'c√≤n ko', 'c√≤n k', 'c√≤n h√†ng', 'h·∫øt h√†ng', 'in stock', 'available'])) {
            $hit = BotTools::resolveProduct($msg);
            if (($hit['found'] ?? false)) {
                $av = BotTools::checkAvailability($hit['slug']);
                if (($av['found'] ?? false)) {
                    $status = $av['status'] ?? 'unknown';
                    $txt = match ($status) {
                        'in_stock'     => "C√≥ n√® üíñ **{$av['name']}** ƒëang c√≤n h√†ng. Mu·ªën m√¨nh g·ª£i √Ω dung t√≠ch/ph·ªëi routine kh√¥ng?",
                        'out_of_stock' => "Ti·∫øc qu√° üò£ **{$av['name']}** hi·ªán h·∫øt h√†ng. M√¨nh g·ª£i √Ω s·∫£n ph·∫©m t∆∞∆°ng t·ª± nh√©?",
                        default        => "M√¨nh ch∆∞a ƒë·ªçc ƒë∆∞·ª£c t·ªìn kho realtime c·ªßa **{$av['name']}**. B·∫°n m·ªü trang s·∫£n ph·∫©m ƒë·ªÉ xem l·ª±a ch·ªçn s·∫µn c√≥ nha!",
                    };
                    $info = BotTools::getProductInfo($hit['slug']);
                    BotLogger::save($msg, $txt, [
                        't0' => $t0,
                        'handled_by' => 'fast_stock',
                        'intent' => 'availability',
                        'matched_slug' => $info['slug'] ?? null,
                        'product_count' => $info['found'] ? 1 : 0
                    ]);
                    return response()->json([
                        'reply' => $txt,
                        'products' => $info['found'] ? [[
                            'url' => url('/products/' . $info['slug']),
                            'img' => $info['img'] ?: asset('images/placeholder.png'),
                            'name' => $info['name'],
                            'price' => number_format($info['price_min']) . '‚Ç´',
                            'compare' => null,
                            'discount' => null
                        ]] : [],
                        'suggestions' => ['G·ª£i √Ω thay th·∫ø', 'So s√°nh v·ªõi m√≥n kh√°c', '/reset'],
                    ]);
                }
            }
        }

        /* ===== FAST PATH C: nh·∫Øc t√™n s·∫£n ph·∫©m r√µ r√†ng ===== */
        $hit = BotTools::resolveProduct($msg);
        $normLen = mb_strlen(Str::slug($msg));
        if (($hit['found'] ?? false) && (($hit['_score'] ?? 0) >= 0.6 || $normLen >= 6)) {
            $info = BotTools::getProductInfo($hit['slug']);
            if (($info['found'] ?? false)) {
                $reply = "Th√¥ng tin **{$info['name']}** trong h·ªá th·ªëng:\n- M√¥ t·∫£: " . ($info['short_desc'] ?: mb_substr($info['long_desc'] ?? '', 0, 180) . '‚Ä¶') .
                    "\n- Gi√° t·ª´: **" . number_format($info['price_min']) . "‚Ç´**\nB·∫°n mu·ªën m√¨nh so s√°nh v·ªõi m√≥n kh√°c kh√¥ng?";
                BotLogger::save($msg, $reply, [
                    't0' => $t0,
                    'handled_by' => 'fast_product',
                    'intent' => 'product_info',
                    'matched_slug' => $info['slug'],
                    'product_count' => 1
                ]);
                ConversationMemory::pushTurn($mem, 'user', $msg);
                ConversationMemory::pushTurn($mem, 'assistant', $reply);
                ConversationMemory::save($mem);
                return response()->json([
                    'reply' => $reply,
                    'products' => [[
                        'url' => url('/products/' . $info['slug']),
                        'img' => $info['img'] ?: asset('images/placeholder.png'),
                        'name' => $info['name'],
                        'price' => number_format($info['price_min']) . '‚Ç´',
                        'compare' => null,
                        'discount' => null
                    ]],
                    'suggestions' => ['So s√°nh', 'C√°ch d√πng chu·∫©n', '/reset'],
                ]);
            }
        }

        /* ===== LLM (n·∫øu c√≥ key) ‚Äî gi·ªØ nguy√™n tool-calling c·ªßa b·∫°n ===== */
        $gem = new GeminiClient();
        if ($gem->enabled()) {
            try {
                $system = ConversationMemory::systemFromMemory($mem)
                    . "\n\nNguy√™n t·∫Øc: Kh√¥ng b·ªãa. Khi c·∫ßn g·ªçi tools pickProducts/searchProducts/resolveProduct/getProductInfo/checkAvailability/compareProducts/getOrderStatus/validateCoupon/getPolicy.";
                $contents = array_merge(
                    ConversationMemory::asGeminiHistory($mem),
                    [
                        ['role' => 'user', 'parts' => [['text' => '(Few-shot) Da d·∫ßu m·ª•n, ng√¢n s√°ch 300-500k, g·ª£i √Ω gi√∫p m√¨nh v·ªõi?']]],
                        ['role' => 'model', 'parts' => [['text' => 'M√¨nh s·∫Ω g·ª£i √Ω 3‚Äì5 m√≥n k√®m l√Ω do v√† c√°ch d√πng üå∏']]],
                        ['role' => 'user', 'parts' => [['text' => $userForModel]]],
                    ]
                );
                $tools = GeminiTools::declarations();

                $products = [];
                $final = null;
                for ($i = 0; $i < 3; $i++) {
                    $resp = $gem->generate($contents, $tools, $system);
                    $cand = $resp['candidates'][0]['content'] ?? [];
                    $parts = $cand['parts'] ?? [];
                    $calls = [];
                    foreach ($parts as $p) if (isset($p['functionCall'])) $calls[] = $p['functionCall'];
                    if (!$calls) {
                        $texts = [];
                        foreach ($parts as $p) if (isset($p['text'])) $texts[] = $p['text'];
                        $final = trim(implode("\n\n", $texts)) ?: $final;
                        break;
                    }
                    $contents[] = $cand;
                    foreach ($calls as $c) {
                        $name = $c['name'] ?? '';
                        $args = $c['args'] ?? [];
                        $toolRes = BotTools::call($name, $args);
                        if (in_array($name, ['pickProducts', 'searchProducts']) && isset($toolRes['result'])) $products = $toolRes['result'];
                        $contents[] = ['role' => 'user', 'parts' => [['functionResponse' => ['name' => $name, 'response' => $toolRes]]]];
                    }
                }
                if (!$final) {
                    $resp2 = $gem->generate($contents, $tools, $system);
                    $final = $resp2['candidates'][0]['content']['parts'][0]['text'] ?? 'M√¨nh ƒë√£ x·ª≠ l√Ω xong n√®!';
                }
                BotLogger::save($msg, $final, ['t0' => $t0, 'handled_by' => 'llm', 'intent' => 'mixed', 'product_count' => count($products)]);
                ConversationMemory::pushTurn($mem, 'user', $msg);
                ConversationMemory::pushTurn($mem, 'assistant', $final);
                ConversationMemory::save($mem);
                return response()->json(['reply' => $final, 'products' => $products, 'suggestions' => $chips]);
            } catch (\Throwable $e) {
                report($e);
            }
        }

        /* ===== FREE MODE: t∆∞ v·∫•n c∆° b·∫£n t·ª´ DB ===== */
        $products = [];
        $args = [
            'query'      => $msg ?: null,
            'price_min'  => $mem['prefs']['budget_min'] ?? null,
            'price_max'  => $mem['prefs']['budget_max'] ?? null,
            'limit'      => 8
        ];
        $res = BotTools::call('searchProducts', $args);
        $products = $res['result'] ?? [];
        $reply = $products
            ? 'M√¨nh g·ª£i √Ω v√†i m√≥n ph√π h·ª£p n√®. C·∫ßn l·ªçc theo lo·∫°i da/concern kh√¥ng? üíñ'
            : 'B·∫°n n√≥i r√µ h∆°n lo·∫°i da/concern v√† ng√¢n s√°ch ƒë·ªÉ m√¨nh t∆∞ v·∫•n ch√≠nh x√°c nha üå∏';

        BotLogger::save($msg, $reply, ['t0' => $t0, 'handled_by' => $products ? 'search' : 'fallback', 'intent' => 'consult', 'product_count' => count($products), 'ok' => (bool)$products]);
        ConversationMemory::pushTurn($mem, 'user', $msg);
        ConversationMemory::pushTurn($mem, 'assistant', $reply);
        ConversationMemory::save($mem);

        return response()->json(['reply' => $reply, 'products' => $products, 'suggestions' => $chips]);
    }
}
