<?php

namespace App\Http\Requests\Admin;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class UpdateProductRequest extends FormRequest
{
    public function authorize(): bool
    {
        return true;
    }

    public function rules(): array
    {
        $product = $this->route('product');

        return [
            'name'        => ['required', 'string', 'max:255'],
            'slug'        => ['nullable', 'string', 'max:255', Rule::unique('products', 'slug')->ignore($product?->id)],
            'brand_id'    => ['nullable', 'exists:brands,id'],
            'category_id' => ['nullable', 'exists:categories,id'],
            'short_desc'  => ['nullable', 'string'],
            'long_desc'   => ['nullable', 'string'],
            'thumbnail'   => ['nullable', 'image', 'max:2048'],
            'image'       => ['nullable', 'image', 'max:2048'],

            'variants'                    => ['required', 'array', 'min:1'],
            'variants.*.id'               => ['nullable', 'integer', 'exists:product_variants,id'],
            'variants.*.name'             => ['nullable', 'string', 'max:255'],
            'variants.*.sku'              => [
                'nullable',
                'string',
                'max:100',
                'distinct',
                function ($attribute, $value, $fail) {
                    if (!$value) return;
                    preg_match('/^variants\.(\d+)\./', $attribute, $m);
                    $i  = $m[1] ?? null;
                    $id = $i !== null ? $this->input("variants.$i.id") : null;
                    $exists = \App\Models\ProductVariant::where('sku', $value)
                        ->when($id, fn($q) => $q->where('id', '!=', $id))
                        ->exists();
                    if ($exists) $fail('SKU n√†y ƒë√£ t·ªìn t·∫°i.');
                },
            ],
            'variants.*.price'            => ['required', 'numeric', 'min:0'],
            'variants.*.compare_at_price' => ['nullable', 'numeric', 'min:0'],
            // üö´ Kh√¥ng cho nh·∫≠n t·ªìn kho t·ª´ form Edit (tr√°nh reset 0 khi b·∫•m L∆∞u)
            'variants.*.qty_in_stock'     => ['prohibited'],
            'variants.*.low_stock_threshold' => ['nullable', 'integer', 'min:0'],
        ];
    }

    protected function prepareForValidation(): void
    {
        $variants = collect($this->input('variants', []))
            ->filter(fn($v) => isset($v['price']) && $v['price'] !== '' && $v['price'] !== null)
            ->values()->all();
        $this->merge(['variants' => $variants]);
    }

    public function messages(): array
    {
        return [
            'name.required'  => 'Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m.',
            'slug.unique'    => 'Slug ƒë√£ t·ªìn t·∫°i.',
            'thumbnail.image' => '·∫¢nh ƒë·∫°i di·ªán kh√¥ng h·ª£p l·ªá.',
            'thumbnail.max'  => '·∫¢nh t·ªëi ƒëa 2MB.',
            'image.image'    => '·∫¢nh ƒë·∫°i di·ªán kh√¥ng h·ª£p l·ªá.',
            'image.max'      => '·∫¢nh t·ªëi ƒëa 2MB.',

            'variants.required'          => 'Vui l√≤ng gi·ªØ √≠t nh·∫•t 1 bi·∫øn th·ªÉ.',
            'variants.*.price.required'  => 'Gi√° b√°n l√† b·∫Øt bu·ªôc.',
            'variants.*.price.min'       => 'Gi√° b√°n ph·∫£i ‚â• 0.',
            'variants.*.sku.distinct'    => 'SKU c√°c bi·∫øn th·ªÉ kh√¥ng ƒë∆∞·ª£c tr√πng nhau.',
            // (kh√¥ng c√≤n th√¥ng b√°o b·∫Øt nh·∫≠p t·ªìn kho)
        ];
    }
}
